#+title: lwright-net emacs config
#+author: Lane Wright
#+PROPERTY: header-args :tangle init.el
#+auto_tangle: t

* Genereal Look and feel
In this block I'll turn off a lot of un-needed mouse driven menu items. I'll also setup some fonts and themeing.
I also set the escape key to quit command prompts, so that's done earlier rather than later.

Another thing to note is I'm using the doom-themes, so I commented out the line that sets the theme in this block. Later on the theme will be set after
doom themes have been installed.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  ;;turn off some extra crap
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)

  ;;some space please
  (set-fringe-mode 10)

  ;;instead of a ding
  (setq visible-bell t)

  ;;pretty please
  ;;(load-theme 'doom-one)
  ;;set later after doom themes are installed
  (set-face-attribute 'default nil :font "Ubuntu Mono" :height 110)
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 110)

  ;;make escape quit a prompt
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;;set line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)
  ;;and turn off for some modes
  (dolist (mode '(;;org-mode-hook
                  term-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;;turn of wrapping
  (setq truncate-lines t)
  ;;turn on auto revert
  (auto-revert-mode)
  ;;keep my folders clean
  (setq make-backup-files nil)

#+end_src

* Setup package repos and get use-package installed
In this block I setup a few package repos and get the =use-package= package installed.
=use-package= is makes it easier/nicer to install and configure other stuff later.

#+begin_src emacs-lisp

  ;;get some packages up in here
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))
			 
  (package-initialize)
  ;;update if out of date
  (unless package-archive-contents
    (package-refresh-contents))

  ;;setup use-package package
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Setup Ivy
This block configures Ivy the auto-completetion framework/tool.

#+begin_src emacs-lisp

  ;; setup ivy
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (setq ivy-initial-inputs-alist nil)
    (ivy-mode 1))

  ;;(use-package ivy-rich)
  ;;(ivy-rich-mode 1)

  (use-package all-the-icons-ivy-rich
    :ensure t
    :config (all-the-icons-ivy-rich-mode 1))

#+end_src

* Look and feel continued
Now that I've got some basic stuff going, I can further customize the look and feel. Specifically I instll the doom themes and mode line. Get some
icons installed. Generally make =emacs= look nicer.
On new installation, be sure to run M-x all-the-icons-install-fonts

#+begin_src emacs-lisp

  ;;setup doom-modeline
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

  ;;setup doom-themes
  (use-package doom-themes
    :ensure t
    :init
  (load-theme 'doom-vibrant t))

  ;;setup all-the-icons
  (use-package all-the-icons
    :ensure t)

  ;;setup rainbow-delimiters
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Setup some helper tools
=counsel= provides some nice menus to show you potential results. Ex: when using counsel-find-file instead of find-file, you'll see a list of file in
the mini buffer. =helpful= modifies the help buffers with more useful/contextual content. =which-key= shows key bindings because everything in emacs
has a keybinding and you'll never remember everything.

#+begin_src emacs-lisp

  ;;setup which-key
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

  ;;setup counsel
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))
  (global-set-key (kbd "M-b") 'counsel-switch-buffer)

  ;;setup helpful
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Custom key bindings
I started using emacs with doom emacs, and I like using the space bar as the leader key. I'm mostly following bindings that were stuck in my muscle
memory from there. Though, I didn't use it too long before writing up my own config, so maybe just a few things are carried over.
=general= seems to be a nice package for configuring key bindings. And evil makes emacs feel like vim. (extensible vi layer)

#+begin_src emacs-lisp

  ;;setup general (defines key binds)
  (use-package general
    :config
    (general-create-definer lw/leader-keys
       :keymaps '(normal insert visual emacs)
       :prefix "SPC"
       :global-prefix "C-SPC")
    (lw/leader-keys
     "t" '(:ignore t :which-key "toggles")
     "tt" '(counsel-load-theme :which-key "choose theme")

     "q" '(:ignore q :which-key "quit")
     "qq" '(save-buffers-kill-terminal :which-key "quit emacs")

     "d" '(:ignore d :which-key "dired")
     "dd" '(dired :which-key "open dired")

     "o" '(:ignore o :which-key "org")
     "oc" '(org-capture :which-key "capture a thought")
     "oa" '(org-agenda :which-key "agenda")
     "ot" '(org-todo :which-key "toggle todo item")
     "X" '(org-capture :which-key "capture a thought")

     "m" '(:ignore m :which-key "mail")
     "mc" '(mu4e-compose-new :which-key "new email")

     "g" '(:ignore g :which-key "git")
     "gg" '(magit-status :which-key "git status")

     "." '(counsel-find-file :which-key "open file")

     "w" '(:ignore w :which-key "window")
     "ws" '(split-window-below :which-key "split window")
     "wv" '(split-window-right :which-key "vertical split window")
     "wc" '(delete-window :which-key "close window")
     "wk" '(windmove-up :which-key "move window above")
     "wj" '(windmove-down :which-key "move window below")
     "wh" '(windmove-left :which-key "move window left")
     "wl" '(windmove-right :which-key "move window right")

     "b" '(:ignore b :which-key "buffer")
     "b k" '(kill-current-buffer :which-key "kill buffer")
     "b i" '(ibuffer :which-key "interactive buffer")
     "b B" '(counsel-switch-buffer :which-key "switch buffer")))


  ;;be EVIL
  (defun lw/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :hook (evil-mode . lw/evil-hook)
    :config
    ;;(evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    (define-key evil-normal-state-map (kbd "/") 'swiper)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
  (evil-mode 1)

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* Setup magit
=magit= (I think it is pronounced like magic) is a nice way to manage git repos. This package is one of those that brings a lot of people to try out
emacs.

#+begin_src emacs-lisp

  (use-package magit)

#+end_src
* The almighty org-mode
Personally, org-mode is what drew me to emacs. The agenda part seems to be a nice tool in a work context. Literate configs and code just seem to me
that's the way it should be; look at the config you're reading...
There's a lot going on in this block. The ~lw/org-mode-setup ()~ function gets called everytime an org-mode buffer is opened.
For the config part, I kinda just dumped a lot of config stuff in there, where my notes todos and journal goes, capture templates. Maybe in the future
I'll write up some separate functions and call them from the config section. That'd make it a little neater.

Quick note about tangling code blocks, if all the blocks need to go to the same file do a ~#+PROPERTY: header-args :tangle namehere~.

#+begin_src emacs-lisp

      (defun lw/org-mode-setup ()
          (org-indent-mode))

      (use-package org
        :hook (org-mode . lw/org-mode-setup)
        :config
        (setq org-directory '("~/org")
              org-agenda-files '("~/org/todo.org" "~/org/notes.org" "~/org/journal.org")
              org-default-notes-file '("~/org/notes.org")
              org-log-done 'note
              org-capture-templates
              '(("t" "Todo" entry (file+headline "~/org/todo.org" "Tasks")
                 "\n* TODO %?\n %i\n %a")
                ("d" "Todo with time" entry (file+olp+datetree "~/org/todo.org" "Scheduled Tasks")
                 "\n* TODO %?\n %i\n SCHEDULED: %^t\n%a")
                ("n" "Notes")
                ("nn" "Note" entry (file+headline "~/org/notes.org" "Notes")
                 "\n* %?\n %i\n")
                ("nc" "Note for CMD and PS" entry (file+headline "~/org/notes.org" "Useful ~CMD~ and ~PS~ commands")
                 "\n* %?\n %i\n")
                ("nr" "Note for Registry hacks" entry (file+headline "~/org/notes.org" "Registry hacks/tricks")
                 "\n* %?\n %i\n")
                ("i" "Idea" entry (file+headline "~/org/notes.org" "Ideas")
                 "\n* IDEA %?\n %i\n %a")
                ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
                 "\n* %?\nEntered on %U\n %i\n %a"))
              org-ellipsis " ↓"
              org-hide-emphasis-markers t
              org-startup-indented t)
              (add-to-list 'org-modules 'org-tempo t)
              (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
              (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
              (add-to-list 'org-structure-template-alist '("py" . "src python"))
              (add-to-list 'org-structure-template-alist '("ps" . "src powershell"))
              (org-babel-do-load-languages
               'org-babel-load-languages '((python . t)
                                           (shell . t)
                                           (haskell .t))))

    (require 'ox-latex)
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-listings 'minted)
    (setq org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    (setq org-latex-minted-options '(("breaklines" "true")
                                   ("breakanywhere" "true")))

    (use-package org-bullets
      :after org
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '(">" ">" ">" ">")))

    (with-eval-after-load 'org-faces
      (dolist (face '((org-level-1 . 1.4)
                      (org-level-2 . 1.3)
                      (org-level-3 . 1.2)
                      (org-level-4 . 1.1)
                      (org-level-5 . 1.05)))
        (set-face-attribute (car face) nil :font "Pink Chicken Bold" :weight 'bold :height (cdr face))))

#+end_src

** auto-tangle
Sometimes automatically doing an org-babel-tangle on file save would be nice.
Per the documentation for org-auto-tangle, adding ~#+auto_tangle: t~ to the top of an org document will cause it to be tangled on saving the org
document.

#+begin_src emacs-lisp

  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))

#+end_src

* Dired key bindings
The default dired key binding really don't make much sense for evil mode.

#+begin_src emacs-lisp

  (evil-define-key 'normal dired-mode-map
    (kbd "M-RET") 'dired-display-file
    (kbd "h") 'dired-up-directory
    (kbd "l") 'dired-find-file)

  (use-package all-the-icons-dired)

  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

#+end_src

* Dashboard
So I can have something nice to look at when I start emacs.

#+begin_src emacs-lisp

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/.emacs.d/emacs-logo-green.png"))

#+end_src

* sudo-edit
=sudo-edit= is useful for when you need super user rights to write a file, but already have
a buffer open for that file.

#+begin_src emacs-lisp

  (use-package sudo-edit
    :ensure t)
  
#+end_src

* mu4e
=mu4e= is a mail program for emacs. To set this up I mostly followed SystemCrafters.
To make all this work, you'll have to install =mu= and =mbsync= from your package manager.
Probably a good idea to setup pgp keys to store passwords for =mbsync=.

#+begin_src emacs-lisp

  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")

  (use-package mu4e
    :ensure nil
    :config
    (setq mu4e-change-filenames-when-moving t)

    (setq mu4e-update-interval (* 5 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/mail")

    (setq mu4e-contexts
          (list
           (make-mu4e-context
            :name "somenull"
            :vars '((user-mail-address . "lane@somenull.com")
                    (user-full-name . "Lane Wright")
                    (mu4e-compose-signature . "- Lane\nWannabe H@x0rM@n")
                    (smtpmail-smtp-server . "somenull.com")
                    (smtpmail-smtp-service . 465)
                    (smtpmail-stream-type . ssl)
                    (mu4e-drafts-folder . "/drafts")
                    (mu4e-sent-folder . "/sent")
                    (mu4e-trash-folder . "/trash"))))))

  (setq message-send-mail-function 'smtpmail-send-it)

  (use-package org-mime
    :ensure t)

  (setq org-mime-export-options '(:section-numbers nil
                                  :with-author nil
                                  :with-toc nil))

  (add-hook 'message-send-hook 'org-mime-htmlize)


    #+end_src


